---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable

      - uses: cachix/cachix-action@v16
        with:
          name: devenv

      - name: Install devenv
        run: nix-env -if https://github.com/cachix/devenv/tarball/latest

      - name: Test build environment
        run: devenv test

      # Start PostgreSQL from devenv
      - name: Start PostgreSQL from devenv
        run: |
          # Start the services in debug mode to see what's happening
          echo "Starting PostgreSQL service with explicit debug..."
          devenv shell pg_ctl --help || echo "pg_ctl command not found"

          # Start devenv in the background and capture output
          devenv up --verbose &
          DEVENV_PID=$!
          echo "Devenv started with PID: $DEVENV_PID"

          # Give PostgreSQL time to initialize
          echo "Sleeping 20 seconds to allow PostgreSQL to start..."
          sleep 20

          # Check process status
          echo "Checking running processes..."
          ps aux | grep postgres || echo "No PostgreSQL processes found"

          # Check service logs if possible
          echo "Checking service logs..."
          devenv shell systemctl status || echo "systemctl not available"

          # Try to start PostgreSQL manually if not running
          echo "Trying manual PostgreSQL start..."
          devenv shell bash -c "pg_ctl -D \$(find /run/user/\$(id -u) -path '*/postgres' -type d 2>/dev/null | head -1) start" || echo "Manual start failed"

      # Wait for PostgreSQL
      - name: Wait for PostgreSQL
        shell: devenv shell bash -- -e {0}
        run: |
          # Print debugging information
          echo "User ID: $(id -u)"
          echo "Looking for PostgreSQL socket files:"
          find /run/user -name ".s.PGSQL.*" -ls 2>/dev/null || echo "No socket files found in /run/user"
          find /tmp -name ".s.PGSQL.*" -ls 2>/dev/null || echo "No socket files found in /tmp"

          echo "PostgreSQL data directories:"
          find /run/user -path "*/postgres" -type d -ls 2>/dev/null || echo "No postgres directories found"

          echo "PostgreSQL environment variables:"
          env | grep -i postgres || echo "No PostgreSQL environment variables"

          echo "PostgreSQL process info:"
          ps aux | grep "[p]ostgres" || echo "No postgres processes found"

          # Wait up to 30 seconds for PostgreSQL to be ready
          timeout=30

          # First try the auto-detection approach
          echo "Attempting to connect using socket directory detection..."
          until [ $timeout -le 0 ]
          do
            # Try to find the socket directory dynamically
            echo "Looking for PostgreSQL data directories..."
            socket_dirs=$(find /run/user -path "*/postgres" -type d 2>/dev/null || echo "")

            for socket_dir in $socket_dirs; do
              echo "Trying connection with socket directory: $socket_dir"
              if pg_isready -h "$socket_dir" -U postgres; then
                echo "PostgreSQL is ready with socket directory!"
                exit 0
              fi
            done

            # Also try localhost connection
            if pg_isready -h localhost -U postgres; then
              echo "PostgreSQL is ready with localhost connection!"
              exit 0
            fi

            # Also try Unix socket connection
            if pg_isready -U postgres; then
              echo "PostgreSQL is ready with default connection!"
              exit 0
            fi

            echo "Waiting for PostgreSQL to be ready... ($timeout seconds left)"
            sleep 2
            timeout=$((timeout-2))
          done

          echo "Timed out waiting for PostgreSQL"
          echo "Final debugging info:"
          find /run/user -name ".s.PGSQL.*" -ls 2>/dev/null || echo "No socket files found in /run/user"
          ps aux | grep postgres || echo "No postgres processes found"
          netstat -ltnp 2>/dev/null | grep postgres || echo "No postgres connections found"

          # Instead of failing, we'll try to continue without PostgreSQL for debugging purposes
          echo "WARNING: Continuing without PostgreSQL for debugging purposes"
          exit 0

      # Phoenix application tests - ensure HOME is set properly
      - name: Setup Phoenix environment
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Install Phoenix dependencies
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: mix deps.get

      - name: Compile Phoenix application
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: mix compile --warnings-as-errors

      - name: Create and migrate test database
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
          MIX_ENV: test
        run: |
          mix ecto.create
          mix ecto.migrate

      - name: Run Phoenix tests
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
          MIX_ENV: test
        run: mix test
