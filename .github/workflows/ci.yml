---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable

      - uses: cachix/cachix-action@v16
        with:
          name: devenv

      - name: Install devenv
        run: nix-env -if https://github.com/cachix/devenv/tarball/latest

      - name: Test build environment
        run: devenv test

      # Start PostgreSQL from devenv
      - name: Start PostgreSQL from devenv
        run: devenv up &

      - name: Wait for PostgreSQL
        shell: devenv shell bash -- -e {0}
        run: |
          # Print debugging information
          echo "User ID: $(id -u)"
          echo "Looking for PostgreSQL socket files:"
          find /run/user -name ".s.PGSQL.*" -ls 2>/dev/null || echo "No socket files found in /run/user"
          find /tmp -name ".s.PGSQL.*" -ls 2>/dev/null || echo "No socket files found in /tmp"
          echo "PostgreSQL process info:"
          ps aux | grep postgres || echo "No postgres processes found"

          # Wait up to 120 seconds for PostgreSQL to be ready
          timeout=120
          until pg_isready -U postgres || [ $timeout -le 0 ]
          do
            echo "Waiting for PostgreSQL to be ready... ($timeout seconds left)"
            echo "Trying with explicit socket directory..."
            socket_dir=$(find /run/user -path "*/postgres" -type d 2>/dev/null | head -1)
            if [ -n "$socket_dir" ]; then
              pg_isready -h "$socket_dir" -U postgres
            fi
            sleep 1
            timeout=$((timeout-1))
          done

          if [ $timeout -le 0 ]; then
            echo "Timed out waiting for PostgreSQL"
            echo "Final debugging info:"
            find /run/user -name ".s.PGSQL.*" -ls 2>/dev/null
            find /tmp -name ".s.PGSQL.*" -ls 2>/dev/null
            netstat -ltnp 2>/dev/null | grep postgres || echo "No postgres connections found"
            exit 1
          else
            echo "PostgreSQL is ready!"
          fi

      # Phoenix application tests - ensure HOME is set properly
      - name: Setup Phoenix environment
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Install Phoenix dependencies
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: mix deps.get

      - name: Compile Phoenix application
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
        run: mix compile --warnings-as-errors

      - name: Create and migrate test database
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
          MIX_ENV: test
        run: |
          mix ecto.create
          mix ecto.migrate

      - name: Run Phoenix tests
        shell: devenv shell bash -- -e {0}
        env:
          HOME: "/home/runner"
          MIX_ENV: test
        run: mix test
